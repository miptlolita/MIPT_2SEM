;Выполнил Пахомов Александр, 455 группа, ФФКЭ
;Ответ: данная программа находит произведение всех своих аргументов и выводит его в виде "Res = чиселка".

	extern	printf                                                     ;Экспортируем фунцкию "printf" языка C.
	extern	atoi                                                       ;Экспортируем функцию "atoi" языка C.

	section	.data                                                      ;Начало секции данных.

res:	dd	1                                                          ;Обьявляем переменную res.
format:	db	'Res = %d', 10, 0                                          ;Обьявляем переменную строкового типа для вывода результата.
error:	db	'There are no command line arguments to process', 10, 0    ;Обьявляем переменную строкового типа, содержащую сообщение об ошибке.

	section .text                                                      ;Начало секции исходного кода.

	global	main                                                       ;Делаем метку main глобальной.

main:                                                                      ;Обьявление метки main.
	mov	ecx, [esp+4]                                               ;Сохраняем в регистре ecx количество введённых чисел.
	dec	ecx                                                        ;Уменьшаем его на единицу.
	jz	nothingToProcess                                           ;Если ноль, выдаём ошибку.
	mov	edx, [esp+8]                                               ;Первую чиселку из введённых кидаем в edx.
process:                                                                   ;Обьявление метки process.
	push	ecx                                                        ;Кидаем в стек значение ecx.
	push	edx                                                        ;Кидаем в стек значение edx.
	push	dword [edx+ecx*4]                                          ;Кидаем в стек число, из введённых.
	call	atoi                                                       ;Вызываем функцию atoi, она переводит строку в число.
	add	esp, 4                                                     ;Чистим стек после себя.
	pop	edx                                                        ;Забираем из стека edx.
	pop	ecx                                                        ;Забираем из стека ecx.
	imul	eax, [res]                                                 ;Умножаем значение переменной res на значение регистра eax, в котором хранится резульат atoi.
	mov	[res], eax                                                 ;Записываем результат умножения в res.
	dec	ecx                                                        ;Уменьшаем счётчик, т.е. количество аргументов программы.
	jnz	process                                                    ;Прыгаем пока эти аргументы вообще есть

	push	dword eax                                                  ;Кидаем результат в стек.
	push	format                                                     ;Кидаем строку форматирующую результат туда же.
	call	printf                                                     ;Вызываем функцию printf.
	add	esp, 8                                                     ;Чистим после себя стек удаляя 8 байт.
	ret                                                                ;Возврат из процедуры, вызванной "call".

nothingToProcess:                                                          ;Обьявление метки nothingToProcess.
	push	error                                                      ;Кидаем в стек строку с сообщением об ошибке.
	call	printf                                                     ;Вызываем функцию printf.
	add	esp, 4                                                     ;Чистим после себя стек, удаляя 4 байта нашей строки с ошибкой.
	ret                                                                ;Возврат из процедуры, вызванной "call".
