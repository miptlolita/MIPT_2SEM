;Маслов Михаил, 453 группа, ФФКЭ. Задание по асемблеру.
;Ответ: данная программа находит среднее значение всех введённых аргументов (чисел).

	extern	printf                                                             ;Экспорт функции "printf".
	extern	atoi                                                               ;Экспорт функции "atoi", которая переводит строку в число.

	section	.data															   ;Начало секции данных.

count:	dd	0                                                                  ;Объявление переменной счётчика "count".
sum:	dd	0                                                                  ;Объявление переменной "sum".
format:	db	'%.15f', 10, 0                                                     ;Объявление строки.
error:	db	'There are no command line arguments to average', 10, 0            ;Объявление строки с сообщением об ошибке.

	section .text                                                              ;Начало секции исполняемого кода.

	global	main                                                               ;Делаем метку "main" глобальной.

main:                                                                          ;Объявление метки "main".
	mov	ecx, [esp+4]                                                           ;Записываем в регистр ecx значение первой команды из стека(вершина+4). То есть количество чисел.
	dec	ecx                                                                    ;Уменьшаем значение в регистре ecx на единицу.
	jz	nothingToAverage                                                       ;Если чисел в стеке нет, то выдаёт ошибку. (переход к метке nothingToAverage)
	mov	[count], ecx                                                           ;По адресу "count" сохраняем количество чисел.
	mov	edx, [esp+8]                                                           ;Кладём в edx первое число из введённых нами.
accumulate:                                                                    ;Объявление метки "accumulate".
	push	ecx                                                                ;Кладём в стек значение ecx. 
	push	edx                                                                ;Кладём в стек чиселку из edx.
	push	dword [edx+ecx*4]                                                  ;Помещаем в стек адрес текущей чиселки.
	call	atoi                                                               ;Вызов функции "atoi".
	add	esp, 4                                                                 ;Идём к первому значению из стека.
	pop	edx                                                                    ;Достаём из стека edx.
	pop	ecx                                                                    ;Достаём из стека ecx.
	add	[sum], eax                                                             ;Прибавляем к переменной суммы чисел значение из eax, которое есть результат применения atoi к edx.
	dec	ecx                                                                    ;Уменьшаем количество оставшихся чиселок.
	jnz	accumulate                                                             ;Если это количество не нулевое, возвращаемся к метке accumulate.
	                                                                           ;Таким образом к данному моменту мы собрали сумму введённых чиселок.
average:                                                                       ;Объявление метки "average".
	fild	dword [sum]                                                        ;Загружает целое число в стек (из адреса sum).
	fild	dword [count]                                                      ;Загружает целое число в стек (из адреса count).
	fdivp	st1, st0                                                           ;Делит st1 на st0 и сохраняет результат в st1. Затем извлекает полученное из стека.
	                                                                           ;Таким образом к данному моменту мы получили таки среднее значение введённых чисел.
	sub	esp, 8                                                                 ;Выкидываем 2 верхних значения стека.
	fstp	qword [esp]                                                        ;Копирует наше полученное среднее значение и складывает для печати в стек.
	push	format                                                             ;Кидаем в стек значение переменной "format".
	call	printf                                                             ;Вызов функции "printf".
	add	esp, 12                                                                ;Убирает верхнее значение в стеке (чистим стек после "printf").
	ret                                                                        ;Возврат из процедуры, вызванной "call".

nothingToAverage:                                                              ;Объявление метки "nothingToAverage".                                              
	push	error                                                              ;Кидаем в стек значение переменной "error".
	call	printf                                                             ;Вызов функции "printf".
	add	esp, 4                                                                 ;Убирает верхнее значение в стеке (чистим стек после "printf").
	ret                                                                        ;Возврат из процедуры, вызванной "call".
